plugins {
    id 'java-library'
    id "com.github.ben-manes.versions" version "0.51.0"
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

description = 'Idx Sync CLI'
group = 'ch.frostnova.cli'
version = '1.0.0-SNAPSHOT'

ext {
    mainClass = "ch.frostnova.cli.idx.sync.IdxSync"
    shadowJarBaseName = project.name

    dateTimeFormat = java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
    buildDate = java.time.LocalDateTime.now()

    jacksonVersion = '2.17.+'
    junitVersion = '5.10.+'
    assertjVersion = '3.25.+'
    mockitoVersion = '5.11.+'
    slf4jVersion = '1.7.+'
    logbackVersion = '1.2.+'
    jLineVersion = '3.20.0'

    libs = [
            jackson    : [
                    "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
                    "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion",
                    "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}",
            ],
            testBase   : [
                    "org.junit.jupiter:junit-jupiter-api:${junitVersion}",
                    "org.assertj:assertj-core:$assertjVersion",
                    "org.mockito:mockito-core:${mockitoVersion}"
            ],
            testRuntime: [
                    "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
            ]
    ]
}

dependencies {
    implementation libs.jackson

    testImplementation libs.testBase
    testRuntimeOnly libs.testRuntime
}

defaultTasks 'clean', 'build', 'shadowJar'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
    withJavadocJar()
    withSourcesJar()
}
test {
    useJUnitPlatform()
}
jar {
    manifest {
        attributes(
                "Name": project.name,
                "Version": project.version,
                "Build-Date": dateTimeFormat.format(buildDate),
                "Main-Class": mainClass
        )
    }
}
shadowJar {
    archiveBaseName = shadowJarBaseName
    archiveClassifier = ''
    archiveVersion = ''
}
repositories {
    mavenCentral()
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}
